var mongoose = require('mongoose'),
	crypto = require('crypto'),
	Schema = mongoose.Schema;

var UserSchema = new Schema({
	firstName: String,
	lastName: String,
	email: {
		type: String,
		index: true,
		match: [/.+\@.+\..+/, 'Invalid email'] // validates email matching to a regex
	},
	username: {
		type: String,
		trim: true, //trims leading or trailing whitespace
		unique: true,
		required: true //validation of existence 
	},
	password: {
		type: String,
		validate: [
		function(password){ //validates password length 
			return password && password.length > 6;
		}, 'Password must be longer than 6 characters'
		]
	},
	salt: {
		type: String
	},
	provider: { //indicate the strategy used to register the user 
		type: String,
		required: true
	},
	providerId: String, //indicate the user identifier for the authentication strategy 
	providerData: {},
	created: {
		type: Date,
		default: Date.now 
	}
/*
	website: {
		type: String,
		get: function(url){
			if(!url) {
				return url;
			} else {
				if(url.indexOf('http://') !== 0 && url.indexOf('https://') !== 0) {
					url = 'http://' + url;
				}

				return url;
			}
		}
	},
*/
});

//Virtual attributes are a great feature of Mongoose, allowing you to modify document 
//representation as they're being moved through your application's layers without getting 
//persisted to MongoDB

UserSchema.virtual('fullName').get(function(){
	return this.firstName + ' ' + this.lastName;
}).set(function(fullName) {
	var splitName = fullName.split(' ');
	this.firstName = splitName[0] || '';
	this.lastName = splitName[1] || '';
});

UserSchema.pre('save', function(next){ //creates an autogenerated pseudo-random hashing salt, then replaces current user password with a hashed password using the hashPassword() instance method
	if(this.password) {
		this.salt = new
		  Buffer(crypto.randomBytes(16).toString('base64'), 'base64');
		this.password = this.hashPassword(this.password);
	}

	next();
});

UserSchema.methods.hashPassword = function(password) { //instance method, hashes a password string using nodes crypto module 
	return crypto.pbkdf2Sync(password, this.salt, 10000, 64).toString('base64');
};

UserSchema.methods.authenticate = function(password) { //instance method,accepts a string argument, hashes it, and compares to current user's hashed password
	return this.password === this.hashPassword(password);
};

UserSchema.statics.findUniqueUsername = function(username, suffix, callback) { //static method, used to find an available unique username for new users
	var _this = this;
	var possibleUsername = username + (suffix || '');

	_this.findOne({
		username: possibleUsername
	}, function(err, user){
		if(!err) {
			if(!user) {
				callback(possibleUsername);
			} else {
				return _this.findUniqueUsername(username, (suffix || 0) + 1, callback);
			}
		} else {
			callback(null);
		}
	});
};

UserSchema.set('toJSON', { 
	getters: true, 
	virtuals: true 
}); //force mongoose to include getters 

/*
UserSchema.post('save', function(next) {
	if(this.wasNew){ //also isNew
		console.log('A new user was created');
	} else {
		console.log('A user updated their details'); //seems to always spit out this 
	}
});
*/


mongoose.model('User', UserSchema);